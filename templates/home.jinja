<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>

    <!-- Add Friend -->
    <section id="add_friend">
    <input id="add_friend_input" placeholder="Add friend by username">
    <button onclick="addFriend()">Add Friend</button>
    </section>

    <!-- Section to display pending friend requests -->
    <section id="friend_requests_section">
        <h2>Friend Requests</h2>
        <ul id="friend_requests_list"></ul>
    </section>

    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Displays Friend List -->
    <section id="friends_section">
        <h2>Friends List</h2>
        <ul id="friends_list"></ul>
    </section>

</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    function fetchPendingRequests() {
        fetch(`/pending_requests?username=${username}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayPendingRequests(data.requests);
            } else {
                console.error('Failed to fetch pending friend requests:', data.error);
            }
        })
        .catch(error => {
            console.error('Error fetching pending friend requests:', error);
        });
    }

    function displayPendingRequests(requests) {
        const requestListElement = document.getElementById('friend_requests_list');
        requestListElement.innerHTML = '';

        requests.forEach(request => {
            const listItem = document.createElement('li');
            listItem.textContent = `From: ${request[0]}`;
            const acceptButton = document.createElement('button');
            acceptButton.textContent = 'Accept';
            acceptButton.onclick = () => acceptFriendRequest(request[0]);
            const declineButton = document.createElement('button');
            declineButton.textContent = 'Decline';
            declineButton.onclick = () => declineFriendRequest(request[0]);
            listItem.appendChild(declineButton);
            listItem.appendChild(acceptButton);
            requestListElement.appendChild(listItem);
        });
    }

    function fetchConfirmedFriends() {
        fetch(`/confirmed_friends?username=${username}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayConfirmedFriends(data.friends);
            } else {
                console.error('Failed to fetch confirmed friends:', data.error);
            }
        })
        .catch(error => {
            console.error('Error fetching confirmed friends:', error);
        });
    }

    function displayConfirmedFriends(friends) {
        const friendListElement = document.getElementById('friends_list');
        friendListElement.innerHTML = '';

        friends.forEach(friend => {
            const listItem = document.createElement('li');
            listItem.textContent = `${friend[1]}`;
            friendListElement.appendChild(listItem);
        });
    }

    // Fetch data when the page loads
    window.onload = function() {
        fetchPendingRequests();
        fetchConfirmedFriends();
    };

    function acceptFriendRequest(fromUsername) {
        fetch(`/accept_friend_request`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ from_username: fromUsername, to_username: username }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Friend request accepted successfully!");
                fetchPendingRequests(); // Refresh pending requests
                fetchConfirmedFriends(); // Refresh confirmed friends list
                } else {
                    alert("Failed to accept friend request: " + data.error);
            }
        })
        .catch(error => {
            console.error('Error accepting friend request:', error);
        });
    }

    function declineFriendRequest(fromUsername) {
        fetch(`/decline_friend_request`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ from_username: fromUsername, to_username: username }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to decline friend request');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                alert("Friend request declined successfully!");
                fetchPendingRequests(); // Refresh pending requests
            } else {
                alert("Failed to decline friend request: " + data.error);
            }
        })
        .catch(error => {
            console.error('Error declining friend request:', error);
            alert("Failed to decline friend request. Please try again later.");
        });
    }

    function addFriend() {
        const friendUsername = document.getElementById('add_friend_input').value;
        if (!friendUsername) {
            alert("Please enter a username to add as a friend.");
            return;
        }
        fetch(`/add_friend`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: "{{ username }}", friendUsername: friendUsername }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Friend request sent successfully!");
                fetchConfirmedFriendList();
            } else {
                alert("Failed to add friend: " + data.error);
            }
        })
        .catch(error => {
            console.error('Error sending friend request:', error);
        });
    }
    
    function chatRequest(sender, receiver) {
        fetch('/chat_request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sender, receiver }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Proceed with chat
                console.log('Chat request successful');
            } else {
                // Show alert if not friends
                alert("You are not friends with this user. Please send a friend request.");
                return;
            }
        })
        .catch(error => {
            console.error('Error sending chat request:', error);
        });
    }

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room() {

        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();

            // Fetch message history ==============================
            fetch(`/get_messages?username=${username}`)
            .then(response => response.json())
            .then(data => {
                data.messages.forEach(msg => {
                    add_message(`${msg[0]}: ${msg[1]}`, "black");
                });
            })
            .catch(error => {
                console.error('Error fetching messages:', error);
            });
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    
</script>
{% endblock %}
